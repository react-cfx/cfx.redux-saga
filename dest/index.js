'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reduxSaga = require('redux-saga');

var _reduxSaga2 = _interopRequireDefault(_reduxSaga);

var _effects = require('redux-saga/effects');

var sagaEffects = _interopRequireWildcard(_effects);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.0-beta2
var SagaMiddleware, dispatch;

SagaMiddleware = function () {
  function SagaMiddleware() {
    _classCallCheck(this, SagaMiddleware);

    this.middleware = (0, _reduxSaga2.default)();
    this;
  }

  _createClass(SagaMiddleware, [{
    key: 'getMidleware',
    value: function getMidleware() {
      return this.middleware;
    }
  }, {
    key: 'runSagas',
    value: function runSagas(sagas) {
      var i, len, results, saga;
      results = [];
      for (i = 0, len = sagas.length; i < len; i++) {
        saga = sagas[i];
        results.push(this.middleware.run(saga));
      }
      return results;
    }
  }]);

  return SagaMiddleware;
}();

dispatch = function dispatch(action, actionType) {
  return sagaEffects.put(Object.assign({}, action, {
    type: actionType
  }));
};

exports.default = { sagaEffects: sagaEffects, dispatch: dispatch, createSagaMiddleware: _reduxSaga2.default, SagaMiddleware: SagaMiddleware };

